{"version":3,"file":"static/js/604.2051488b.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","redux/ToContacts/operations.js","components/ContactList/ContactList.js","redux/ToContacts/filterSlice.js","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","pages/ContactsPage/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btnContact\":\"ContactList_btnContact__XKgt7\",\"ulList\":\"ContactList_ulList__1XsEM\"};","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://6512c8f9b8c6ce52b3963300.mockapi.io';\n\nexport const getContacts = createAsyncThunk(\n  'contacts/getContacts',\n  async (_, thunkAPI) => {\n    try {\n      const response = await axios.get('/contacts');\n      return response.data;\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e.message);\n    }\n  }\n);\n\nexport const addContact = createAsyncThunk(\n  'contacts/addContact',\n  async (contact, thunkAPI) => {\n    try {\n      const response = await axios.post('/contacts', contact);\n      return response.data;\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e.message);\n    }\n  }\n);\n\nexport const deleteContact = createAsyncThunk(\n  'contacts/deleteContact',\n  async (contactId, thunkAPI) => {\n    try {\n      await axios.delete(`/contacts/${contactId}`);\n      return contactId;\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e.message);\n    }\n  }\n);\n\nexport const toggleCompleted = createAsyncThunk(\n  'contacts/toggleCompleted',\n  async (contact, thunkAPI) => {\n    try {\n      const response = await axios.put(`/contacts/${contact.id}`, {\n        completed: !contact.completed,\n      });\n      return response.data;\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e.message);\n    }\n  }\n);\n","import React from 'react';\nimport { useEffect } from 'react';\nimport css from './ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact, getContacts } from 'redux/ToContacts/operations';\nimport { selectContacts, selectFilter } from 'redux/ToContacts/selectors';\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const getViewContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  return (\n    <ul className={css.ulList}>\n      {getViewContacts.map(({ name, number, id }) => (\n        <li key={id} id={id}>\n          {name}: {number}\n          <button\n            className={css.btnContact}\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","const { createSlice } = require('@reduxjs/toolkit');\n\nconst initialFilterState = '';\n\nconst filterSlice = createSlice({\n  name: 'filter',\n  initialState: initialFilterState,\n  reducers: {\n    changeFilter(_, action) {\n      return action.payload;\n    },\n  },\n});\n\nexport const { changeFilter } = filterSlice.actions;\n\nexport const filterReducer = filterSlice.reducer;\n","// extracted by mini-css-extract-plugin\nexport default {\"NameStyle\":\"Filter_NameStyle__mJ3iG\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/ToContacts/filterSlice';\nimport css from './Filter.module.css';\nimport { selectFilter } from 'redux/ToContacts/selectors';\nexport function Filter() {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFilterChange = event => {\n    dispatch(changeFilter(event.target.value));\n  };\n\n  return (\n    <div>\n      <label>\n        Find contacts by name\n        <input\n          type=\"text\"\n          value={filter}\n          onChange={handleFilterChange}\n          className={css.NameStyle}\n        />\n      </label>\n    </div>\n  );\n}\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"NameStyle\":\"ContactForm_NameStyle__ILIJk\",\"numberSlyle\":\"ContactForm_numberSlyle__dDvTc\",\"inputSlyle\":\"ContactForm_inputSlyle__NakgU\"};","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/ToContacts/operations';\nimport { nanoid } from '@reduxjs/toolkit';\nimport css from './ContactForm.module.css';\nimport { selectContacts } from 'redux/ToContacts/selectors';\n\nfunction ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const [contactName, setContactName] = useState('');\n  const [contactNumber, setContactNumber] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const sameName = contacts.some(\n      ({ name }) => name && name.toLowerCase() === contactName.toLowerCase()\n    );\n\n    if (sameName) {\n      alert(`${contactName} is already in contacts!`);\n      return;\n    }\n\n    dispatch(\n      addContact({\n        name: contactName,\n        number: contactNumber,\n        id: nanoid(),\n      })\n    );\n\n    setContactName('');\n    setContactNumber('');\n  };\n\n  const handleChange = e => {\n    const { value, name } = e.target;\n\n    switch (name) {\n      case 'name':\n        setContactName(value);\n        break;\n      case 'number':\n        setContactNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label className={css.NameStyle}>\n        Name:\n        <input\n          className={css.inputStyle}\n          type=\"text\"\n          name=\"name\"\n          value={contactName}\n          onChange={handleChange}\n        />\n      </label>\n      <label className={css.NumberStyle}>\n        Number:\n        <input\n          className={css.inputStyle}\n          type=\"text\"\n          name=\"number\"\n          value={contactNumber}\n          onChange={handleChange}\n        />\n      </label>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { selectContacts } from 'redux/ToContacts/selectors';\nimport ContactList from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { selectIsLoading, selectError } from 'redux/ToContacts/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(selectContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <ContactForm />\n\n      <Filter />\n      {isLoading && !error && <ContactList />}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["axios","getContacts","createAsyncThunk","_","thunkAPI","response","data","rejectWithValue","message","addContact","contact","deleteContact","contactId","id","completed","contacts","useSelector","selectContacts","filter","selectFilter","dispatch","useDispatch","getViewContacts","name","toLowerCase","includes","useEffect","className","css","map","number","type","onClick","filterSlice","createSlice","require","initialState","reducers","changeFilter","action","payload","actions","reducer","Filter","value","onChange","event","target","useState","contactName","setContactName","contactNumber","setContactNumber","handleChange","e","onSubmit","preventDefault","some","alert","nanoid","isLoading","selectIsLoading","error","selectError"],"sourceRoot":""}